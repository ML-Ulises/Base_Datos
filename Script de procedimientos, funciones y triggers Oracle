-- Función para calcular dígito verificador
CREATE OR REPLACE FUNCTION dv (codigo VARCHAR)
RETURN PLS_INTEGER IS 
i PLS_INTEGER DEFAULT 1;
suma PLS_INTEGER DEFAULT 0;
digito PLS_INTEGER DEFAULT 1;
BEGIN 
    WHILE (i<12) LOOP 
        suma := suma + TO_NUMBER(SUBSTR(codigo,i,1)) +
        3 * (TO_NUMBER(SUBSTR(codigo,i+1,1)));
        i := i+2;
    END LOOP;
    
    digito := MOD((TRUNC(suma/10)+1)*10-suma,10);
    
    RETURN digito;
END;
/

-- Funciones para generar valores aleatorios
SELECT DBMS_RANDOM.string('U', 4) FROM DUAL; 
SELECT DBMS_RANDOM.string('L', 4) FROM DUAL; 
SELECT TRUNC(DBMS_RANDOM.value(0, 9)) FROM DUAL; 

-- Función para generar contraseñas aleatorias
CREATE OR REPLACE FUNCTION generar_contrasena_aleatoria RETURN VARCHAR2 IS
    longitud_total NUMBER := 8 + FLOOR(DBMS_RANDOM.VALUE(0, 13));
    primera_letra CHAR(1);
    segundo_digito CHAR(1);
    simbolo_especial CHAR(1);
    alfanumerico_4a7 VARCHAR2(4);
    digito_8 CHAR(1);
    resto_contrasena VARCHAR2(12);

    letras_mayusculas VARCHAR2(26) := 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
    digitos VARCHAR2(10) := '0123456789';
    simbolos_especiales VARCHAR2(8) := '$#(){}[]';
    alfanumericos VARCHAR2(62) := 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
    todos_caracteres VARCHAR2(94) := 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789$#(){}[]!@%^&*-_=+;:,.<>?/|~';
    
    contrasena VARCHAR2(20);
BEGIN
    primera_letra := SUBSTR(letras_mayusculas, FLOOR(DBMS_RANDOM.VALUE(1, 27)), 1);
    segundo_digito := SUBSTR(digitos, FLOOR(DBMS_RANDOM.VALUE(1, 11)), 1);
    simbolo_especial := SUBSTR(simbolos_especiales, FLOOR(DBMS_RANDOM.VALUE(1, 9)), 1);

    alfanumerico_4a7 := '';
    FOR i IN 1..4 LOOP
        alfanumerico_4a7 := alfanumerico_4a7 || SUBSTR(alfanumericos, FLOOR(DBMS_RANDOM.VALUE(1, 63)), 1);
    END LOOP;

    digito_8 := SUBSTR(digitos, FLOOR(DBMS_RANDOM.VALUE(1, 11)), 1);

    resto_contrasena := '';
    FOR i IN 1..(longitud_total - 8) LOOP
        resto_contrasena := resto_contrasena || SUBSTR(todos_caracteres, FLOOR(DBMS_RANDOM.VALUE(1, 95)), 1);
    END LOOP;

    contrasena := primera_letra || segundo_digito || simbolo_especial || alfanumerico_4a7 || digito_8 || resto_contrasena;
    contrasena := SUBSTR(contrasena, 1, 20);
    
    RETURN contrasena;
END generar_contrasena_aleatoria;
/

-- Ejemplo de uso de la función de contraseña
SELECT generar_contrasena_aleatoria() FROM dual;

-- Tabla temporal
CREATE TABLE tmp(ID INTEGER, campox VARCHAR2(100));

-- Procedimiento para llenar la tabla temporal
CREATE OR REPLACE PROCEDURE llenartmp AS
BEGIN
    FOR i IN 1..1000000 LOOP
        EXECUTE IMMEDIATE 'insert into Tmp(ID, campox) values (:ID, :campox)' 
        USING i, DBMS_RANDOM.String('A', 100);
    END LOOP;
    COMMIT;
END llenartmp;
/

-- Ejecutar el procedimiento (comentado para no ejecutar accidentalmente)
-- CALL llenartmp();

-- Tabla de empleados
CREATE TABLE empleados(
    id_empleado NUMBER PRIMARY KEY,
    nombre VARCHAR2(30), 
    salario NUMBER,
    fecha_contratacion DATE,
    departamento VARCHAR2(50)
);

-- Tabla de auditoría para empleados
CREATE TABLE auditar_empleados(
    id_auditoria NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    id_empleado NUMBER,
    accion VARCHAR2(50),
    usuario VARCHAR2(50),
    fecha TIMESTAMP DEFAULT SYSTIMESTAMP,
    datos_anteriores VARCHAR2(1000),
    datos_nuevos VARCHAR2(1000)
);

-- Procedimiento para agregar empleados (corregido)
CREATE OR REPLACE PROCEDURE agregar_empleado(
    p_id IN NUMBER,
    p_nombre IN VARCHAR2,
    p_salario IN NUMBER,
    p_fecha_contratacion IN DATE DEFAULT SYSDATE,
    p_departamento IN VARCHAR2 DEFAULT NULL
) IS 
BEGIN 
    IF p_salario >= 3000 AND p_salario <= 5000 THEN 
        INSERT INTO empleados (id_empleado, nombre, salario, fecha_contratacion, departamento)
        VALUES (p_id, p_nombre, p_salario, p_fecha_contratacion, p_departamento);
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('Empleado agregado correctamente');
    ELSE 
        DBMS_OUTPUT.PUT_LINE('No se pudo agregar el empleado. El salario debe estar entre 3000 y 5000');
    END IF;
END agregar_empleado;
/

-- Función para obtener salario (corregida)
CREATE OR REPLACE FUNCTION obtener_salario(
    p_id IN NUMBER 
) RETURN NUMBER IS 
    v_salario empleados.salario%TYPE;
BEGIN 
    SELECT salario INTO v_salario 
    FROM empleados 
    WHERE id_empleado = p_id;
    
    RETURN v_salario;
EXCEPTION 
    WHEN NO_DATA_FOUND THEN 
        RETURN NULL;
END obtener_salario;
/

-- Procedimiento para listar empleados (completado)
CREATE OR REPLACE PROCEDURE listar_empleados IS 
    CURSOR c_empleados IS 
        SELECT id_empleado, nombre, salario, departamento FROM empleados;
    v_id empleados.id_empleado%TYPE;
    v_nombre empleados.nombre%TYPE;
    v_salario empleados.salario%TYPE;
    v_departamento empleados.departamento%TYPE;
BEGIN
    DBMS_OUTPUT.PUT_LINE('ID | Nombre | Salario | Departamento');
    DBMS_OUTPUT.PUT_LINE('----------------------------------');
    
    OPEN c_empleados;
    LOOP
        FETCH c_empleados INTO v_id, v_nombre, v_salario, v_departamento;
        EXIT WHEN c_empleados%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE(v_id || ' | ' || v_nombre || ' | ' || v_salario || ' | ' || v_departamento);
    END LOOP;
    CLOSE c_empleados;
END listar_empleados;
/

-- Procedimiento para procesar pagos (corregido)
CREATE OR REPLACE PROCEDURE procesar_pago(
    p_id_empleado IN NUMBER,
    p_monto_pago IN NUMBER
) IS
BEGIN
    SAVEPOINT inicio_proceso;
    
    UPDATE empleados
    SET salario = salario + p_monto_pago
    WHERE id_empleado = p_id_empleado;
    
    IF SQL%ROWCOUNT = 0 THEN
        ROLLBACK TO inicio_proceso;
        DBMS_OUTPUT.PUT_LINE('Error: Empleado no encontrado.');
    ELSE
        -- Registrar en auditoría
        INSERT INTO auditar_empleados(id_empleado, accion, usuario, datos_nuevos)
        VALUES(p_id_empleado, 'ACTUALIZACION SALARIO', USER, 'Nuevo salario: ' || (obtener_salario(p_id_empleado)));
        
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('Pago procesado correctamente.');
    END IF;
    
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK TO inicio_proceso;
        DBMS_OUTPUT.PUT_LINE('Error durante el proceso: ' || SQLERRM);
END procesar_pago;
/

-- Procedimiento de auditoría (corregido)
CREATE OR REPLACE PROCEDURE auditar_empleado(
    p_id_empleado IN NUMBER, 
    p_accion IN VARCHAR2,
    p_datos_anteriores IN VARCHAR2 DEFAULT NULL,
    p_datos_nuevos IN VARCHAR2 DEFAULT NULL
) IS
BEGIN 
    INSERT INTO auditar_empleados (id_empleado, accion, usuario, datos_anteriores, datos_nuevos)
    VALUES (p_id_empleado, p_accion, USER, p_datos_anteriores, p_datos_nuevos);
    COMMIT;
END auditar_empleado;
/

-- Trigger para validar salario (corregido)
CREATE OR REPLACE TRIGGER validar_salario
BEFORE INSERT OR UPDATE ON empleados 
FOR EACH ROW 
BEGIN 
    IF :NEW.salario < 0 THEN 
        RAISE_APPLICATION_ERROR(-20001, 'EL SALARIO NO PUEDE SER NEGATIVO');
    END IF;
END validar_salario;
/

-- Ejemplo que activará el trigger (fallará)
-- INSERT INTO empleados (id_empleado, nombre, salario) VALUES(4, 'Ulises', -10000);

-- Trigger para prevenir borrado de jefe (corregido)
CREATE OR REPLACE TRIGGER prevenir_borrar_jefe
BEFORE DELETE ON empleados
FOR EACH ROW 
BEGIN 
    IF :OLD.nombre = 'Director General' THEN 
        RAISE_APPLICATION_ERROR(-20002, 'No se puede borrar al director general');
    END IF;
END prevenir_borrar_jefe;
/

-- Trigger adicional para auditoría de cambios
CREATE OR REPLACE TRIGGER auditar_cambios_empleados
AFTER INSERT OR UPDATE OR DELETE ON empleados
FOR EACH ROW
DECLARE
    v_accion VARCHAR2(20);
    v_datos_anteriores VARCHAR2(1000);
    v_datos_nuevos VARCHAR2(1000);
BEGIN
    IF INSERTING THEN
        v_accion := 'INSERCION';
        v_datos_nuevos := 'ID: ' || :NEW.id_empleado || ', Nombre: ' || :NEW.nombre || 
                         ', Salario: ' || :NEW.salario || ', Depto: ' || :NEW.departamento;
    ELSIF UPDATING THEN
        v_accion := 'ACTUALIZACION';
        v_datos_anteriores := 'ID: ' || :OLD.id_empleado || ', Nombre: ' || :OLD.nombre || 
                              ', Salario: ' || :OLD.salario || ', Depto: ' || :OLD.departamento;
        v_datos_nuevos := 'ID: ' || :NEW.id_empleado || ', Nombre: ' || :NEW.nombre || 
                         ', Salario: ' || :NEW.salario || ', Depto: ' || :NEW.departamento;
    ELSIF DELETING THEN
        v_accion := 'ELIMINACION';
        v_datos_anteriores := 'ID: ' || :OLD.id_empleado || ', Nombre: ' || :OLD.nombre || 
                              ', Salario: ' || :OLD.salario || ', Depto: ' || :OLD.departamento;
    END IF;
    
    INSERT INTO auditar_empleados(id_empleado, accion, usuario, datos_anteriores, datos_nuevos)
    VALUES(COALESCE(:NEW.id_empleado, :OLD.id_empleado), v_accion, USER, v_datos_anteriores, v_datos_nuevos);
END;
/

-- Función adicional para calcular aumento salarial
CREATE OR REPLACE FUNCTION calcular_aumento(
    p_id_empleado IN NUMBER,
    p_porcentaje IN NUMBER
) RETURN NUMBER IS
    v_salario_actual NUMBER;
    v_nuevo_salario NUMBER;
BEGIN
    v_salario_actual := obtener_salario(p_id_empleado);
    
    IF v_salario_actual IS NULL THEN
        RETURN NULL;
    END IF;
    
    v_nuevo_salario := v_salario_actual * (1 + p_porcentaje/100);
    RETURN v_nuevo_salario;
END calcular_aumento;
/

-- Procedimiento para aplicar aumento general
CREATE OR REPLACE PROCEDURE aplicar_aumento_general(
    p_porcentaje IN NUMBER,
    p_departamento IN VARCHAR2 DEFAULT NULL
) IS
BEGIN
    IF p_departamento IS NULL THEN
        UPDATE empleados
        SET salario = salario * (1 + p_porcentaje/100);
    ELSE
        UPDATE empleados
        SET salario = salario * (1 + p_porcentaje/100)
        WHERE departamento = p_departamento;
    END IF;
    
    COMMIT;
    DBMS_OUTPUT.PUT_LINE('Aumento aplicado correctamente');
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        DBMS_OUTPUT.PUT_LINE('Error al aplicar aumento: ' || SQLERRM);
END aplicar_aumento_general;
/
